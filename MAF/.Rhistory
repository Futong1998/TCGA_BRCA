comp[,4]=log(comp[,4])
plot(comp[,3:4])
gl=read.table('gene_length.human.txt')
head(gl)
colnames(gl)=c('symbol','length_CCDS')
load(file = 'gene_length_of_hg38.Rdata')
head(g_l)
colnames(g_l)=c('gene_id', 'length_R')
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
e2s=toTable(org.Hs.egSYMBOL)
head(e2s)
g_l=merge(g_l,e2s,by='gene_id')
comp=merge(g_l,gl,by='symbol')
comp[,3]=log(comp[,3])
comp[,4]=log(comp[,4])
plot(comp[,3:4])
library(ggpubr)
head(comp)
ggscatter(comp,'length_R','length_CCDS')
?ggscatter
ggscatter(comp,'length_R','length_CCDS', add = "reg.line")
ggscatter(comp,'length_R','length_CCDS',
add = "reg.line",
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE)
ggscatter(comp,'length_R','length_CCDS',
add = "reg.line",
xlim=c(0,12),
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE)
ggscatter(comp,'length_R','length_CCDS',
add = "reg.line",
xlim=c(5,14),ylim=c(5,14)
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE)
ggscatter(comp,'length_R','length_CCDS',
add = "reg.line",
xlim=c(5,14),ylim=c(5,14),
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE)
View(comp)
ggscatter(comp,'length_R','length_CCDS',
add = "reg.line",
xlim=c(4,14),ylim=c(4,14),
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE)
ggscatter(comp,'length_R','length_CCDS',
color = "black", shape = 21, size = 3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
)
ggscatter(comp,'length_R','length_CCDS',
color = "black", shape = 21, size = 0.3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
)
geom_abline(intercept = 37, slope = -5, color="red",
linetype="dashed", size=1.5)
p=ggscatter(comp,'length_R','length_CCDS',
color = "black", shape = 21, size = 0.3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
)
p+geom_abline(intercept = 37, slope = -5, color="red",
linetype="dashed", size=1.5)
p+geom_abline(intercept = 0, slope = 1, color="red",
linetype="dashed", size=1.5)
View(comp)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
tx_by_gene <- transcriptsBy(txdb, by="gene")
gene_lens <- max(width(tx_by_gene))
View(genes_txdb)
head(gene_lens)
gene_lens = as.data.frame(max(width(tx_by_gene)))
View(gene_lens)
load(file = 'gene_length_of_hg38.Rdata')
head(g_l)
gene_lens$gene_id=rownames(gene_id)
gene_lens$gene_id=rownames(gene_lens)
head(gene_lens)
colnames(g_l)=c('length_R','gene_id',)
colnames(g_l)=c('length_R','gene_id')
colnames(gene_lens)=c('length_R','gene_id')
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
e2s=toTable(org.Hs.egSYMBOL)
head(e2s)
g_l=merge(g_l,e2s,by='gene_id')
comp=merge(g_l,gl,by='symbol')
comp[,3]=log(comp[,3])
comp[,4]=log(comp[,4])
plot(comp[,3:4])
head(comp)
gene_lens=merge(gene_lens,e2s,by='gene_id')
comp=merge(gene_lens,gl,by='symbol')
comp[,3]=log(comp[,3])
comp[,4]=log(comp[,4])
plot(comp[,3:4])
head(comp)
library(ggpubr)
p=ggscatter(comp,'length_R','length_CCDS',
color = "black", shape = 21, size = 0.3, # Points color, shape and size
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor
cor.coeff.args = list(method = "pearson", label.x = 3, label.sep = "\n")
)
p+geom_abline(intercept = 0, slope = 1, color="red",
linetype="dashed", size=1.5)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb = TxDb.Hsapiens.UCSC.hg38.knownGene
tx_by_gene = transcriptsBy(txdb, by="gene")
gene_lens = as.data.frame(max(width(tx_by_gene)))
gene_lens$gene_id=rownames(gene_lens)
colnames(gene_lens)=c('length_R','gene_id')
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
e2s=toTable(org.Hs.egSYMBOL)
head(e2s)
gene_lens=merge(gene_lens,e2s,by='gene_id')
comp=merge(gene_lens,gl,by='symbol')
comp[,3]=log(comp[,3])
comp[,4]=log(comp[,4])
View(comp)
View(g_l)
load(file = 'gene_length_of_hg38.Rdata')
head(g_l)
colnames(g_l)=c('gene_id', 'length_R')
View(g_l)
log2(589655)
gl=read.table('gene_length.human.txt')
head(gl)
ggboxplot(dat,x = 'BRCA',  y = 'TMB',ylab = 'log2(TMB+1)',xlab='TCGA')
ggviolin(dat,x = 'BRCA',  y = 'TMB',ylab = 'log2(TMB+1)',xlab='TCGA')
fivenum(TMB)
fivenum(dat$TMB)
rm(list = ls())
options(stringsAsFactors = F)
## UCSC xena source
BRCA.mutect2 = read.table( 'TCGA-BRCA.mutect2_snv.tsv.gz',sep = '\t',header = T)
colnames(BRCA.mutect2)
read.table()
head(BRCA.mutect2)
BRCA.mutect2$pos=paste0(BRCA.mutect2$chrom,':',
BRCA.mutect2$start,'-',
BRCA.mutect2$end)
TMB=as.numeric(table(BRCA.mutect2$Sample_ID)/38)
dat=data.frame(TMB=log2(TMB+1),BRCA='BRCA')
fivenum(dat$TMB)
library(ggpubr)
ggviolin(dat,x = 'BRCA',  y = 'TMB',ylab = 'log2(TMB+1)',xlab='TCGA')
rm(list = ls())
options(stringsAsFactors = F)
## UCSC xena source
BRCA.mutect2 = read.table( 'TCGA-BRCA.mutect2_snv.tsv.gz',sep = '\t',header = T)
colnames(BRCA.mutect2)
read.table()
head(BRCA.mutect2)
BRCA.mutect2$pos=paste0(BRCA.mutect2$chrom,':',
BRCA.mutect2$start,'-',
BRCA.mutect2$end)
TMB=as.numeric(table(BRCA.mutect2$Sample_ID)/38)
dat=data.frame(TMB=log2(TMB+1),BRCA='BRCA')
fivenum(dat$TMB)
library(ggpubr)
ggviolin(dat,x = 'BRCA',  y = 'TMB',ylab = 'log2(TMB+1)',xlab='TCGA')
gl=read.table('gene_length.human.txt')
head(gl)
TMB=as.data.frame(table(BRCA.mutect2$Sample_ID)/38)
View(TMB)
allgenes=unique(BRCA.mutect2$gene)
sample(allgenes,10),
sample(allgenes,10)
sample(allgenes,10)
sample(allgenes,10)
sample(allgenes,10)
sample(allgenes,10)
sample(allgenes,10)
sample(allgenes,10)
sample(allgenes,10)
sample(allgenes,10)
sample(allgenes,10)
View(dat)
View(TMB)
cg=sample(allgenes,10)
tmp=BRCA.mutect2[BRCA.mutect2$gene %in% cg,]
View(tmp)
head(TMB)
head(gl)
sum(gl[gl[,1] %in% cg,])
sum(gl[gl[,1] %in% cg,2])
cg=sample(allgenes,10)
panle_length=sum(gl[gl[,1] %in% cg,2])/1000000
panle_length
small.BRCA.mutect2=BRCA.mutect2[BRCA.mutect2$gene %in% cg,]
small.TMB=as.data.frame(table(small.BRCA.mutect2$Sample_ID)/38)
View(small.TMB)
small.TMB=as.data.frame(table(small.BRCA.mutect2$Sample_ID)/small.BRCA.mutect2)
small.TMB=as.data.frame(table(small.BRCA.mutect2$Sample_ID)/panle_length)
View(small.TMB)
View(small.TMB)
View(small.BRCA.mutect2)
View(TMB)
View(tmp)
View(small.TMB)
comp=merge(small.TMB, TMB,by='Var1')
View(comp)
cor(comp[,2:3])
cor(comp[,2],comp[,3])
lapply(1:1000, function(x){
cg=sample(allgenes,10)
panle_length=sum(gl[gl[,1] %in% cg,2])/1000000
small.BRCA.mutect2=BRCA.mutect2[BRCA.mutect2$gene %in% cg,]
small.TMB=as.data.frame(table(small.BRCA.mutect2$Sample_ID)/panle_length)
comp=merge(small.TMB, TMB,by='Var1')
cor(comp[,2],comp[,3])
})
seq(10,300,by=10)
tmp=lapply(seq(10,300,by=10), function(size){
as.numeric(lapply(1:1000, function(x){
cg=sample(allgenes,size)
panle_length=sum(gl[gl[,1] %in% cg,2])/1000000
small.BRCA.mutect2=BRCA.mutect2[BRCA.mutect2$gene %in% cg,]
small.TMB=as.data.frame(table(small.BRCA.mutect2$Sample_ID)/panle_length)
comp=merge(small.TMB, TMB,by='Var1')
cor(comp[,2],comp[,3])
}))
})
tmp=do.call(rbind,tmp)
View(tmp)
rownames(tmp)=seq(10,300,by=10)
apply(tmp, 1, mean)
plot(apply(tmp, 1, mean))
tmp[,1]
tmp[1,]
apply(tmp, 1, mean,na.omit)
apply(tmp, 1, mean,na.omit=T)
apply(tmp, 1, mean,na.omit=F)
apply(tmp, 1, mean,na.omit=TRUE)
plot(apply(tmp, 1, mean))
tmp=t(tmp)
dat=tmp
plot(apply(dat, 2, mean ))
library(ggpubr)
View(dat)
library(reshape2)
melt(dat)
head(melt(dat))
df=melt(dat)[,2:3]
colnames(df)=c('number_of_genes','cor')
library(ggpubr)
ggviolin(df,x = 'number_of_genes',  y = 'cor' )
ggviolin(df,x = 'number_of_genes',  y = 'cor',
add = "boxplot")
TMB=as.numeric(table(BRCA.mutect2$Sample_ID)/38)
dat=data.frame(TMB=log2(TMB+1),BRCA='BRCA')
fivenum(dat$TMB)
library(ggpubr)
ggviolin(dat,x = 'BRCA',  y = 'TMB',ylab = 'log2(TMB+1)',xlab='TCGA')
library(maftools)
load(file = 'BRCA_Maf_input.Rdata')
project='TCGA_BRCA_all'
head(filter_phe)
x=unique(laml@data$Tumor_Sample_Barcode)[1]
het = inferHeterogeneity(maf = laml, tsb = x, vafCol = 't_vaf')
print(het$clusterMeans)
print(het$clusterData$MATH[1])
plotClusters(clusters = het)
het$clusterData
x=unique(laml@data$Tumor_Sample_Barcode)[2]
het = inferHeterogeneity(maf = laml, tsb = x, vafCol = 't_vaf')
print(het$clusterMeans)
print(het$clusterData$MATH[1])
plotClusters(clusters = het)
x=unique(laml@data$Tumor_Sample_Barcode)[5]
het = inferHeterogeneity(maf = laml, tsb = x, vafCol = 't_vaf')
print(het$clusterMeans)
print(het$clusterData$MATH[1])
plotClusters(clusters = het)
math=lapply(unique(laml@data$Tumor_Sample_Barcode), function(x){
#x=unique(laml@data$Tumor_Sample_Barcode)[5]
#png(paste0(x,'_vaf_clust.png'),res=120,width = 1080,height = 1080)
het = inferHeterogeneity(maf = laml, tsb = x, vafCol = 't_vaf')
#print(het$clusterMeans)
return(het$clusterData$MATH[1])
#plotClusters(clusters = het)
#dev.off()
})
x=TCGA-A8-A08C-01A-11W-A019-09
x='TCGA-A8-A08C-01A-11W-A019-09'
#x=unique(laml@data$Tumor_Sample_Barcode)[5]
#png(paste0(x,'_vaf_clust.png'),res=120,width = 1080,height = 1080)
het = inferHeterogeneity(maf = laml, tsb = x, vafCol = 't_vaf')
dim(laml@data[laml@data$Tumor_Sample_Barcode==x,])
nrow(laml@data[laml@data$Tumor_Sample_Barcode==x,])
math=lapply(patients, function(x){
#x=unique(laml@data$Tumor_Sample_Barcode)[5]
if(nrow(laml@data[laml@data$Tumor_Sample_Barcode==x,]) > 5 ){
#png(paste0(x,'_vaf_clust.png'),res=120,width = 1080,height = 1080)
het = inferHeterogeneity(maf = laml, tsb = x, vafCol = 't_vaf')
#print(het$clusterMeans)
return(het$clusterData$MATH[1])
#plotClusters(clusters = het)
#dev.off()
}
})
patients=unique(laml@data$Tumor_Sample_Barcode)
math=lapply(patients, function(x){
#x=unique(laml@data$Tumor_Sample_Barcode)[5]
if(nrow(laml@data[laml@data$Tumor_Sample_Barcode==x,]) > 5 ){
#png(paste0(x,'_vaf_clust.png'),res=120,width = 1080,height = 1080)
het = inferHeterogeneity(maf = laml, tsb = x, vafCol = 't_vaf')
#print(het$clusterMeans)
return(het$clusterData$MATH[1])
#plotClusters(clusters = het)
#dev.off()
}
})
math
unlist(math)
unlist(math,na.omit=F)
as.numeric(math)
do.call(rbind,math)
names(math)=patients
as.data.frame(math)
unlist(math)
length(unlist(math))
boxplot(unlist(math))
save(math,file = 'math.Rdata')
load(file = 'math.Rdata')
rm(list = ls())
require(maftools)
options(stringsAsFactors = F)
load(file = 'math.Rdata')
load(file = 'BRCA_Maf_input.Rdata')
sort(table(laml@data$Tumor_Sample_Barcode),decreasing = T)
table(table(laml@data$Tumor_Sample_Barcode)>10)
length( table(laml@data$Tumor_Sample_Barcode))
het=inferHeterogeneity(maf = laml, tsb = NULL,top=970)
laml@data$t_vaf = (laml@data$t_alt_count/laml@data$t_depth)
mut=laml@data[,c("Hugo_Symbol","Chromosome","Start_Position","Tumor_Sample_Barcode","t_vaf")]
mut$pos=paste(mut$Chromosome,mut$Start_Position,sep=':')
mathd=het$clusterMeans
mathd=mathd[mathd$cluster !='outlier' ,]
mathd=as.data.frame(table(mathd$Tumor_Sample_Barcode))
mathd2=unique(as.data.frame(het$clusterData)[c(5,8)])
mathd=merge(mathd,mathd2,by.x='Var1',by.y='Tumor_Sample_Barcode')
head(filter_phe)
mathd$type=filter_phe[match(mathd$Var1,filter_phe$Tumor_Sample_Barcode),'tnbc']
head(mathd)
library(ggpubr)
p <- ggboxplot(mathd, x = "type", y = "MATH",
color = "type",
add = "jitter", shape = "type")
View(mut)
rm(list = ls())
require(maftools)
options(stringsAsFactors = F)
load(file = 'math.Rdata')
load(file = 'BRCA_Maf_input.Rdata')
laml@data$t_vaf = (laml@data$t_alt_count/laml@data$t_depth)
mut=laml@data[,c("Hugo_Symbol","Chromosome","Start_Position","Tumor_Sample_Barcode","t_vaf")]
mut$pos=paste(mut$Chromosome,mut$Start_Position,sep=':')
View(mut)
mut$Tumor_Sample_Barcode=substring(mut$Tumor_Sample_Barcode,1,16)
View(mut)
View(mut)
unique(mut[,c(1,4)])
mut=as.data.frame(mut)
unique(mut[,c(1,4)])
gs=unique(mut[,c(1,4)])
table(gs$Hugo_Symbol)
sort(table(gs$Hugo_Symbol))
sort(table(gs$Hugo_Symbol),decreasing = T)
head(sort(table(gs$Hugo_Symbol),decreasing = T))
head(sort(table(gs$Hugo_Symbol),decreasing = T),50)
topg=names(head(sort(table(gs$Hugo_Symbol),decreasing = T),50))
topg
math
g=topg[1]
mutSamples=unique(mut[mut$Hugo_Symbol == g ,2])
mutSamples
mutSamples=unique(mut[mut$Hugo_Symbol == g ,4])
mutSamples
math
math[mutSamples]
mutSamples
math
as.data.frame(math)
unlist(math)
as.data.frame(unlist(math))
math=as.data.frame(unlist(math))
View(math)
rownames(math)=substring(rownames(math),1,16)
mutSamples=mutSamples[mutSamples %in% rownames(math)]
mutSamples
mut=ifelse(rownames(math) %in% mutSamples,'mut','wild')
table(mut)
this_math=rbind(math,mut)
View(this_math)
this_math=cbind(math,mut)
View(this_math)
colnames(math)='math'
this_math=cbind(math,mut)
library(ggpubr)
p <- ggboxplot(this_math, x = "mut", y = "math",
color = "mut",
add = "jitter", shape = "mut")
p <- ggboxplot(this_math, x = "mut", y = "math",
color = "mut",
add = "jitter", shape = "mut")
p
lapply(topg, function(g){
#g=topg[1]
mutSamples=unique(mut[mut$Hugo_Symbol == g ,4])
mutSamples=mutSamples[mutSamples %in% rownames(math)]
mut=ifelse(rownames(math) %in% mutSamples,'mut','wild')
this_math=cbind(math,mut)
library(ggpubr)
p <- ggboxplot(this_math, x = "mut", y = "math",
color = "mut",
add = "jitter", shape = "mut")
p+stat_compare_means(method = 't.test')
p
ggsave(filename = paste0('t.test.',g,'.png'))
})
mut=laml@data[,c("Hugo_Symbol","Chromosome","Start_Position","Tumor_Sample_Barcode","t_vaf")]
mut$pos=paste(mut$Chromosome,mut$Start_Position,sep=':')
mut$Tumor_Sample_Barcode=substring(mut$Tumor_Sample_Barcode,1,16)
mut=as.data.frame(mut)
gs=unique(mut[,c(1,4)])
topg=names(head(sort(table(gs$Hugo_Symbol),decreasing = T),50))
lapply(topg, function(g){
#g=topg[1]
mutSamples=unique(mut[mut$Hugo_Symbol == g ,4])
mutSamples=mutSamples[mutSamples %in% rownames(math)]
mutorNot=ifelse(rownames(math) %in% mutSamples,'mut','wild')
this_math=cbind(math,mutorNot)
library(ggpubr)
p <- ggboxplot(this_math, x = "mutorNot", y = "math",
color = "mutorNot",
add = "jitter", shape = "mutorNot")
p+stat_compare_means(method = 't.test')
p
ggsave(filename = paste0('t.test.',g,'.png'))
})
View(mut)
View(math)
View(filter_phe)
#We will run mutExclusive on top 10 mutated genes.
somaticInteractions(maf = laml, top = 25, pvalue = c(0.05, 0.1))
mutSamples=unique(mut[mut$Hugo_Symbol %in% c('TP53','CDH1') ,4])
mutSamples
mutorNot=ifelse(rownames(math) %in% mutSamples,'mut','wild')
this_math=cbind(math,mutorNot)
library(ggpubr)
p <- ggboxplot(this_math, x = "mutorNot", y = "math",
color = "mutorNot",
add = "jitter", shape = "mutorNot")
p+stat_compare_means(method = 't.test')
p
g=topg[1]
g
#g=topg[1]
mutSamples=unique(mut[mut$Hugo_Symbol == g ,4])
# mutSamples=unique(mut[mut$Hugo_Symbol %in% c('TP53','CDH1') ,4])
mutSamples=mutSamples[mutSamples %in% rownames(math)]
mutorNot=ifelse(rownames(math) %in% mutSamples,'mut','wild')
this_math=cbind(math,mutorNot)
View(this_math)
rm(list = ls())
require(maftools)
options(stringsAsFactors = F)
load(file = 'math.Rdata')
math=as.data.frame(unlist(math))
rownames(math)=substring(rownames(math),1,16)
colnames(math)='math'
load(file = 'BRCA_Maf_input.Rdata')
laml@data$t_vaf = (laml@data$t_alt_count/laml@data$t_depth)
mut=laml@data[,c("Hugo_Symbol","Chromosome","Start_Position","Tumor_Sample_Barcode","t_vaf")]
mut$pos=paste(mut$Chromosome,mut$Start_Position,sep=':')
mut$Tumor_Sample_Barcode=substring(mut$Tumor_Sample_Barcode,1,16)
mut=as.data.frame(mut)
gs=unique(mut[,c(1,4)])
topg=names(head(sort(table(gs$Hugo_Symbol),decreasing = T),50))
lapply(topg, function(g){
#g=topg[1]
mutSamples=unique(mut[mut$Hugo_Symbol == g ,4])
# mutSamples=unique(mut[mut$Hugo_Symbol %in% c('TP53','CDH1') ,4])
mutSamples=mutSamples[mutSamples %in% rownames(math)]
mutorNot=ifelse(rownames(math) %in% mutSamples,'mut','wild')
this_math=cbind(math,mutorNot)
library(ggpubr)
p <- ggboxplot(this_math, x = "mutorNot", y = "math",
color = "mutorNot",
add = "jitter", shape = "mutorNot")
p+stat_compare_means(method = 't.test')
p
ggsave(filename = paste0('t.test.',g,'.png'))
})
